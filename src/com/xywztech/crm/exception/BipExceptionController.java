package com.xywztech.crm.exception;import java.io.IOException;import java.util.Map;import javax.servlet.Servlet;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.springframework.context.ApplicationContext;import org.springframework.web.context.support.WebApplicationContextUtils;/** * 异常捕获后的处理类 *  */public class BipExceptionController implements Servlet {	private Map<String, String> errPageMap;	private Map<String, String> errMsgMap;	private String defaultErrMsg;	private String defaultErrPage;	private static Logger log = Logger.getLogger(BipExceptionController.class);	public void destroy() {	}	public ServletConfig getServletConfig() {		return null;	}	public String getServletInfo() {		return null;	}	/**	 * 系统启动初始化	 */	@SuppressWarnings("unchecked")	public void init(ServletConfig sc) throws ServletException {		// 从Spring配置文件获取		ApplicationContext ctx = WebApplicationContextUtils				.getRequiredWebApplicationContext(sc.getServletContext());		this.errMsgMap = (Map<String, String>) ctx.getBean("getErrMsgMap");		this.errPageMap = (Map<String, String>) ctx.getBean("getErrPageMap");		this.defaultErrMsg = (String) ctx.getBean("getDefaultErrMsg");		this.defaultErrPage = (String) ctx.getBean("getDefaultErrPage");	}	private BizException findBizException(Exception e) {		Throwable tmp = e;		if (tmp != null) {			if (tmp instanceof BizException) {				return (BizException) tmp;			}			tmp = e.getCause();		}		return null;	}	/**	 * 异常捕获后的处理	 */	public void service(ServletRequest req, ServletResponse res)			throws ServletException, IOException {		//获取参数		int status_code = (Integer) req				.getAttribute("javax.servlet.error.status_code");		String str_status_code = String.valueOf(status_code);		Class<?> exception_type = (Class<?>) req				.getAttribute("javax.servlet.error.exception_type");		String message = (String) req				.getAttribute("javax.servlet.error.message");		String servlet_name = (String) req				.getAttribute("javax.servlet.error.servlet_name");		Exception exception = (Exception) req				.getAttribute("javax.servlet.error.exception");		String request_uri = (String) req				.getAttribute("javax.servlet.error.request_uri");		BizException biz = findBizException(exception);				HttpServletResponse response = (HttpServletResponse) res;		HttpServletRequest request = (HttpServletRequest) req;		String page = this.errPageMap.get(str_status_code);		//返回Json		if ((null != page) && (!"".equals(page))) {			String uri = request.getContextPath() + "/" + page;			// request.getRequestDispatcher("/pages/error/error.jsf").forward(request,			// response);			response.setHeader("Cache-Control", "no-store");			response.setHeader("Pragma", "no-cache");			response.setCharacterEncoding("UTF-8");			response.setDateHeader("Expires", 0);			// response.sendRedirect(uri);			// response.sendError(status_code, message);			JSONObject jsonObject = new JSONObject();			jsonObject.put("status_code", str_status_code);			jsonObject.put("message", message);			jsonObject.put("servlet_name", servlet_name);			jsonObject.put("request_uri", request_uri);			//抛出异常是非空BizException，设置相关信息			if (biz != null) { 				//0是输出到错误页，1是协议输出				jsonObject.put("direct", biz.getDirect());				//0信息，1警告，2错误				jsonObject.put("level", biz.getLevel());				//自定义代码，自定义代码省掉为标准事件，如404错误不需要再有自定代码				jsonObject.put("code", biz.getCode());				//错误名称--在extendpoint-ytec-bi-exception.xml中定义				jsonObject.put("errMsg", errMsgMap.get("500-" + biz.getCode()));				//错误原因或业务约束校验提示内容				jsonObject.put("msg", biz.getMsg());			}else {				jsonObject.put("direct", "1");				jsonObject.put("level", "2");				jsonObject.put("code", "SYS");				jsonObject.put("errMsg", "系统错误");				jsonObject.put("msg", exception.toString());			}			// response.getWriter().print(str_status_code+message);			log.info(jsonObject);			response.getWriter().print(jsonObject.toString());			return;		}		page = this.defaultErrPage;		String uri = request.getContextPath() + "/" + page;		response.sendRedirect(uri);		return;	}}